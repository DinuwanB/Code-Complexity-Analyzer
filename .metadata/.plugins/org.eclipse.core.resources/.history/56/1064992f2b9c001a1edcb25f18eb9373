package com.ITPM.ITPM;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Calculation {
	
	public static void main(String[] args) {
		
		String fname = FileMultiple();
		System.out.println(fname + "   main");
		
	}
	
	public static String FileMultiple() {
		
		String fname = null;
		
		String filePath = "D:\\Workspace\\23\\";
		
		File folder = new File(filePath);
	    File[] listOfFiles = folder.listFiles();

	    for (File file : listOfFiles) {
	        if (file.isFile()) {
	            System.out.println("**************************-------------"+file.getName());
	            fname = file.getName();
	        }
	    }
	    System.out.println(fname);
	    
	    return fname;
	}
	
	
    
	
	public int Size(String fname) {
		
		
		int opCount = 0;
        int nuVlCount = 0;
        int strLtCount = 0;
        int keywordsCount = 0;
        int classDefObjCount = 0;
        int classCount = 0;
        int methodCount = 0;
        String varData = "";
        int prist = 0;
        int inForLoopVariablesCount = 0;
        int calc = 0;
        
        Matcher match;

        ArrayList<String> identifiresofforloop = new ArrayList<String>();
        ArrayList<String> insideprintSt = new ArrayList<String>();
        
        try {
            File readData = new File("D:\\Workspace\\23\\"+fname);
            
            //Reading each file
            Scanner myReader = new Scanner(readData);
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                
                //skip comment lines
                if (data.contains("//")) {
                    continue;
                }
                
                //RegX Pattern for find size factor functions
                
                Pattern operatorPattern = Pattern.compile("--|\\+\\+|==|-=|<<|>>|<<<|>>>|->|\\+=|\\*=|/=|&&|&=|%=|>=|<=|<<=|>>=|\\^=|\\+|-|=|\\*|/|%|!=|>|>>>=|\\|=|<|\\|\\||!|\\||\\^|~|\\.|::");
                match = operatorPattern.matcher(data);
                while (match.find()) {
                    System.out.println("Operators  :" + match.group() );
                    opCount++;
                }

                Pattern numericalPattern = Pattern.compile("\\d+(\\.\\d+)?");
                match = numericalPattern.matcher(data);
                while (match.find()) {
                    //System.out.println("Numerical Values  :" + match );
                    nuVlCount++;
                }

                Pattern strLiteralPattern = Pattern.compile("\"(.*?)\"");
                match = strLiteralPattern.matcher(data);
                while (match.find()) {
                    // System.out.println("String Literal  :" + match );
                    strLtCount++;
                }

                Pattern keywordsPattern = Pattern.compile("abstract|assert|break|class|continue|default|enum|extends|final|finally|implements|import|instanceof|interface|native|new|null|package|private|protected|public|return|static|strictfp|super|synchronized|this|throw|throws|transient|try|void|volatile|else");
                match = keywordsPattern.matcher(data);
                while (match.find()) {
                    //System.out.println("String Keywords  :" + match.group() );
                    ++keywordsCount;
                }

                Pattern classObjectDefined = Pattern.compile("[^a-zA-Z]+.([\\w_-]+).=.new.[a-zA-Z]+\\([\\w]*?\\)");
                match = classObjectDefined.matcher(data);
                while (match.find()) {
                    // System.out.println("Defined Object of Class   :" + match.group() );
                    classDefObjCount++;
                }

                Pattern classNamePattern = Pattern.compile("(class)+.[a-zA-Z]+");
                match = classNamePattern.matcher(data);
                while (match.find()) {
                    //System.out.println("Class  :" + match.group() );
                    classCount++;
                }

                Pattern classNamePattern2 = Pattern.compile("(class)+.[a-zA-Z]+(extends)+.");
                match = classNamePattern2.matcher(data);
                while (match.find()) {
                    // System.out.println("Class2  :" + match.group() );
                    classCount++;
                }

                Pattern method = Pattern.compile(".(void)+.[a-zA-Z][a-zA-Z0-9]+\\(|[\\w_]+\\([a-zA-Z]*?\\);|println|print");
                match = method.matcher(data);
                while (match.find()) {
                    //System.out.println("Method Count  :" + match.group() );
                    methodCount++;
                }

                Pattern getVarInForLoop = Pattern.compile("(for).+");
                match = getVarInForLoop.matcher(data);
                while (match.find()) {
                    varData = match.group();
                    identifiresofforloop.add(varData);
                }

                Pattern getMethodLine = Pattern.compile("(|print|println)+\\(.+\\)");
                match = getMethodLine.matcher(data);
                while (match.find()) {
                    insideprintSt.add(match.group());
                }

                Pattern printstat = Pattern.compile("(System|out|print|println)");
                match = printstat.matcher(data);
                while (match.find()) {
                    System.out.println("print sta " + match.group());
                    prist++;
                }

                // System.out.println(prist);
            }
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
            
        
		return 0;
	}
}
       

